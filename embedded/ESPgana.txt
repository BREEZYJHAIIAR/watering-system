#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <time.h>

// Wi-Fi credentials
const char* ssid = "Totskie";
const char* password = "12345678";

// Timezone settings (adjust to your local time zone)
#define UTC_OFFSET 8  // For example, UTC +8 for the Philippines

// Camera pin definitions (adjust these according to your ESP32-CAM board)
#define Y2_GPIO_NUM  5
#define Y3_GPIO_NUM  18
#define Y4_GPIO_NUM  19
#define Y5_GPIO_NUM  21
#define Y6_GPIO_NUM  36
#define Y7_GPIO_NUM  39
#define Y8_GPIO_NUM  34
#define Y9_GPIO_NUM  35
#define XCLK_GPIO_NUM  0
#define PCLK_GPIO_NUM  22
#define VSYNC_GPIO_NUM  25
#define HREF_GPIO_NUM  23
#define SIOD_GPIO_NUM  26
#define SIOC_GPIO_NUM  27
#define PWDN_GPIO_NUM  32
#define RESET_GPIO_NUM  33

void captureAndSendImage(); // Declare the function

void setup() {
    // Start serial communication
    Serial.begin(115200);
    WiFi.begin(ssid, password);

    // Wait for Wi-Fi connection
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected!");

    // Set up time sync with NTP server
    configTime(UTC_OFFSET * 3600, 0, "pool.ntp.org", "time.nist.gov");

    // Wait until time is synchronized
    struct tm timeinfo;
    while (!getLocalTime(&timeinfo)) {
        Serial.println("Failed to get time");
        delay(1000);
    }

    Serial.println("Time synchronization setup complete!");

    // Initialize camera
    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sccb_sda = SIOD_GPIO_NUM;
    config.pin_sccb_scl = SIOC_GPIO_NUM;
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000;
    config.frame_size = FRAMESIZE_QVGA;
    config.pixel_format = PIXFORMAT_JPEG;
    config.fb_count = 2;

    if (esp_camera_init(&config) != ESP_OK) {
        Serial.println("Camera init failed");
        return;
    }

    Serial.println("Camera Ready!");
}

void loop() {
    struct tm timeinfo;
    if (getLocalTime(&timeinfo)) {
        Serial.print("Current time: ");
        Serial.print(timeinfo.tm_hour);
        Serial.print(":");
        Serial.print(timeinfo.tm_min);
        Serial.print(":");
        Serial.println(timeinfo.tm_sec);

        // Check if the time is 10:00 AM
        if (timeinfo.tm_hour == 10 && timeinfo.tm_min == 0) {
            Serial.println("It's 10:00 AM! Capturing image.");
            captureAndSendImage();
            delay(60000); // Prevent multiple captures within the same minute
        }
    } else {
        Serial.println("Failed to get time");
    }

    delay(1000); // Delay between checks
}

void captureAndSendImage() {
    // Capture an image
    camera_fb_t *fb = esp_camera_fb_get();
    if (!fb) {
        Serial.println("Camera capture failed");
        return;
    }

    // Send the captured image to the PHP server
    HTTPClient http;
    http.begin("http://<127.0.0.1>/upload.php"); // Replace <your-server-ip> with your server's IP or domain
    http.addHeader("Content-Type", "application/octet-stream");

    int httpResponseCode = http.POST(fb->buf, fb->len);

    if (httpResponseCode > 0) {
        Serial.printf("Image uploaded, response code: %d\n", httpResponseCode);
    } else {
        Serial.printf("Upload failed, error: %s\n", http.errorToString(httpResponseCode).c_str());
    }

    http.end();
    esp_camera_fb_return(fb); // Release the frame buffer
}
